{"version":3,"sources":["hoc/Aux.js","components/Layout/Layout.js","components/Burger/BurgerIngredients/BurgerIngredients.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","layout","Aux","className","BurgerIngredients","burgerIngredients","this","ingredients","Component","burger","BurgerBuilder","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPACeA,G,MADH,SAACC,GAAD,OAAWA,EAAMC,WCedC,G,MAZA,SAACF,GACZ,OACA,kBAACG,EAAD,KACI,iEAGA,0BAAMC,UAAU,WACXJ,EAAMC,a,mCC+BJI,G,uLApCP,IAAIC,EAAoB,KACxB,OAAOC,KAAKP,MAAMQ,aACd,IAAK,eACDF,EAAoB,yBAAKF,UAAU,gBACnC,MACJ,IAAK,YAEDE,EACA,yBAAKF,UAAU,YACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,WAGnB,MACJ,IAAK,OACDE,EAAoB,yBAAKF,UAAU,SACnC,MACJ,IAAK,SACDE,EAAoB,yBAAKF,UAAU,WACnC,MACJ,IAAK,QAGL,IAAK,QACDE,EAAoB,yBAAKF,UAAU,UACnC,MACJ,QACIE,EAAoB,KAE5B,OAAOA,M,GA/BiBG,cCcjBC,EAZA,SAACV,GACZ,OACA,yBAAKI,UAAU,UACX,kBAAC,EAAD,CAAmBI,YAAY,cAC/B,kBAAC,EAAD,CAAmBA,YAAY,SAC/B,kBAAC,EAAD,CAAmBA,YAAY,WAC/B,kBAAC,EAAD,CAAmBA,YAAY,UAC/B,kBAAC,EAAD,CAAmBA,YAAY,mBCIxBG,E,iLAXP,OACI,kBAACR,EAAD,KACI,kBAAC,EAAD,MACA,2D,GALYS,IAAMH,WCUnBI,MAVf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCKYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b3d19ac1.chunk.js","sourcesContent":["const aux = (props) => props.children;\nexport default aux;","import  React from 'react';\nimport Aux from '../../hoc/Aux';\nimport './Layout.css';\nconst layout = (props) => {\n    return (\n    <Aux>\n        <div>\n            logo, toolbar, sidebar, backdrop\n        </div>\n        <main className=\"content\">\n            {props.children} \n        </main>\n    </Aux>\n    );\n};\nexport default layout;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass BurgerIngredients extends Component{\n    render() {\n        let burgerIngredients = null;\n        switch(this.props.ingredients) {\n            case 'bread-bottom':\n                burgerIngredients = <div className='BreadBottom'></div>;\n                break;\n            case 'bread-top':\n                // BreadTop\n                burgerIngredients = (\n                <div className='BreadTop'>\n                    <div className='seed1'></div>\n                    <div className='seed2'></div>\n                </div>\n                );\n                break;\n            case 'meat':\n                burgerIngredients = <div className='meat'></div>;\n                break;\n            case 'cheese':\n                burgerIngredients = <div className='cheese'></div>;\n                break;\n            case 'bacon':\n                burgerIngredients = <div className='bacon'></div>;\n                break;\n            case 'salad':\n                burgerIngredients = <div className='bacon'></div>;\n                break;\n            default:\n                burgerIngredients = null;\n        }\n        return burgerIngredients;\n    }\n}\n\nBurgerIngredients.propTypes = {\n    ingredients: PropTypes.string.isRequired\n};\nexport default BurgerIngredients;","import React from 'react';\n\nimport './Burger.css';\nimport BurgerIngredients from './BurgerIngredients/BurgerIngredients';\n\nconst burger = (props) => {\n    return (\n    <div className='burger'>\n        <BurgerIngredients ingredients='bread-top' />\n        <BurgerIngredients ingredients='meat' />\n        <BurgerIngredients ingredients='cheese' />\n        <BurgerIngredients ingredients='bacon' />\n        <BurgerIngredients ingredients='bread-bottom' />\n    </div>\n    );\n}\n\nexport default burger;\n","import React from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nclass BurgerBuilder extends React.Component {\n    render() {\n        return(\n            <Aux>\n                <Burger />\n                <div>\n                    Burger build controls\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default BurgerBuilder;","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <BurgerBuilder />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}